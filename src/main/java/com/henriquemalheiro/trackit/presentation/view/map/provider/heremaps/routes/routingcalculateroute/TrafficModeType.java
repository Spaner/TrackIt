//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.29 at 05:11:32 PM WET 
//


package com.henriquemalheiro.trackit.presentation.view.map.provider.heremaps.routes.routingcalculateroute;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for TrafficModeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="TrafficModeType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="enabled"/>
 *     &lt;enumeration value="disabled"/>
 *     &lt;enumeration value="default"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "TrafficModeType")
@XmlEnum
public enum TrafficModeType {


    /**
     * Depending on the credentials of the requestor (Basic/Advanced API), the trafficEnabled option will automatically select appropriate constraints to take the actual traffic conditions into account (real-time, patterns, predictive).
     * 
     */
    @XmlEnumValue("enabled")
    ENABLED("enabled"),

    /**
     * For requestors with Basic-API credentials, only the NAVTEQ Speed Category and road closures are applied, for Advanced-API requestors, additional (wherever available) free-flow information is applied.
     * 
     */
    @XmlEnumValue("disabled")
    DISABLED("disabled"),

    /**
     * The default mode will consider all traffic information that are applicable for the selected TransportMode and the user is authorized to use.
     * 
     */
    @XmlEnumValue("default")
    DEFAULT("default");
    private final String value;

    TrafficModeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static TrafficModeType fromValue(String v) {
        for (TrafficModeType c: TrafficModeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
