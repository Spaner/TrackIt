//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.29 at 05:12:22 PM WET 
//


package com.trackit.presentation.view.map.provider.here.routes.routingcommon;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for RoutingTypeType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="RoutingTypeType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="fastest"/>
 *     &lt;enumeration value="shortest"/>
 *     &lt;enumeration value="economic"/>
 *     &lt;enumeration value="scenic"/>
 *     &lt;enumeration value="fastestNow"/>
 *     &lt;enumeration value="directDrive"/>
 *     &lt;enumeration value="shortestWalk"/>
 *     &lt;enumeration value="leastChanges"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "RoutingTypeType")
@XmlEnum
public enum RoutingTypeType {


    /**
     * Route calculation from start to destination optimizing based on the travel time.  If the travel time forecast is considering current traffic information depends on the provided traffic mode.
     * 
     */
    @XmlEnumValue("fastest")
    FASTEST("fastest"),

    /**
     * Route calculation from start to destination disregarding any traffic conditions. In this mode, the distance of the route is minimized.
     * 
     */
    @XmlEnumValue("shortest")
    SHORTEST("shortest"),

    /**
     * Route calculation that optimizes the route in consideration of economic aspects ("green routing"). 
     * 
     */
    @XmlEnumValue("economic")
    ECONOMIC("economic"),

    /**
     * Route calculation that favors scenic routes and landscapes.
     * 
     */
    @XmlEnumValue("scenic")
    SCENIC("scenic"),

    /**
     * Route calculation from start to destination considering the actual traffic-conditions. Depending on the credentials of the requestor (Basic/Advanced API), the Fastest-Now option will automatically select appropriate constraints to take the actual traffic conditions into account (real-time, patterns, predictive).
     * 
     * This value is a convenience value that is equivalent to routing type = "fastest" &amp; combined with traffic mode = "trafficEnabled".
     * 
     */
    @XmlEnumValue("fastestNow")
    FASTEST_NOW("fastestNow"),

    /**
     * Route calculation from start to destination disregarding any traffic conditions. For requestors with Basic-API credentials, only the NAVTEQ Speed Category and road closures are applied, for Advanced-API requestors, additional (wherever available) free-flow information is applied.
     * 
     * This value is a convenience value that is equivalent to routing type "fastest" &amp; combined with traffic mode = "trafficDisabled".
     * 
     */
    @XmlEnumValue("directDrive")
    DIRECT_DRIVE("directDrive"),

    /**
     * Route calculation that favors the route with the shortest walking distance. 
     * 
     */
    @XmlEnumValue("shortestWalk")
    SHORTEST_WALK("shortestWalk"),

    /**
     * Route calculation that favors the route with the least transfers. 
     * 
     */
    @XmlEnumValue("leastChanges")
    LEAST_CHANGES("leastChanges");
    private final String value;

    RoutingTypeType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static RoutingTypeType fromValue(String v) {
        for (RoutingTypeType c: RoutingTypeType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
